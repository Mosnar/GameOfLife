{"version":3,"sources":["GameOfLife.js"],"names":["GameOfLife","col","row","width","height","canvas","ctx","running","config","drawGrid","colorGrid","colorCell","speed","helpers","eventHandlers","data","init","this","parent","document","getElementById","getContext","$btnStep","$btnPlay","x","y","drawCells","addEventListener","mouseClick","bind","stepClick","playClick","stepAndRender","logicalStep","clear","setTimeout","loadData","exportData","dim","getCellDimensions","w","moveTo","lineTo","h","strokeStyle","stroke","activateCell","cell","deactivateCell","getCellNeighbors","tempX","tempY","tempCell","neighbors","i","j","isCellValid","push","renderCell","fillStyle","fillRect","c","r","tempArray","map","arr","slice","length","clearRect","handleMouseMove","pos","handleMouseClick","mouseMove","evt","translateMousePos","getRelativeMousePos","preventDefault","innerText","removeAttribute","setAttribute","rect","getBoundingClientRect","clientX","left","clientY","top","cellWidth","cellHeight","cellDim","xPos","Math","floor","yPos","window"],"mappings":"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","file":"GameOfLife.js","sourcesContent":["/**\n * Created by Ransom on 3/21/16.\n */\n/**\n * @title GameOfLife JS for Asymmetrik\n * @author Ransom Roberson (ransomr@vt.edu)\n * @date 2016.03.18\n */\n(function () {\n    var GameOfLife = {\n        col: 20,\n        row: 20,\n\n        width: 500,\n        height: 380,\n\n        canvas: null,\n        ctx: null,\n\n        running: false,\n\n        config: {\n            drawGrid: true,\n            colorGrid: '#ddd',\n            colorCell: '#fff',\n            speed: 500\n        },\n\n        helpers: {},\n        eventHandlers: {},\n\n        data: []\n    };\n\n    /**\n     * Called on page load - initializes the GameOfLife board\n     */\n    GameOfLife.init = function () {\n        this.helpers.parent = this;\n        // Get reference to DOM element and a 2d canvas\n        this.canvas = document.getElementById(\"canv\");\n        this.ctx = this.canvas.getContext('2d');\n        this.$btnStep = document.getElementById(\"btnStep\");\n        this.$btnPlay = document.getElementById(\"btnPlay\");\n\n        // Get the latest dimensions of the canvas element\n        this.width = this.canvas.width;\n        this.height = this.canvas.height;\n\n        // Render the grid\n        this.drawGrid();\n\n        // Initialize 2D array of data\n        for (var x = 0; x < this.col; x++) {\n            this.data[x] = [];\n            for (var y = 0; y < this.row; y++) {\n                this.data[x][y] = 0;\n            }\n        }\n\n        // Render canvas\n        this.drawCells();\n\n        // Attach event listeners to canvas\n        // When you click the canvas, spawn a cell\n        this.canvas.addEventListener('click', this.eventHandlers.mouseClick.bind(this), true);\n        // When the \"Step\" button is clicked, go to next iteration\n        this.$btnStep.addEventListener('click', this.eventHandlers.stepClick.bind(this), true);\n        // When the play button is clicked...\n        this.$btnPlay.addEventListener('click', this.eventHandlers.playClick.bind(this), true);\n    };\n\n    /**\n     * Run next iteration ad draw\n     */\n    GameOfLife.stepAndRender = function() {\n        this.logicalStep();\n        this.clear();\n        this.drawCells();\n        if (this.running) {\n            setTimeout(function () {\n                GameOfLife.stepAndRender();\n            }, this.config.speed);\n        }\n    };\n\n    GameOfLife.loadData = function () {\n        // TODO:\n    };\n\n    GameOfLife.exportData = function () {\n        // TODO:\n    };\n\n    /**\n     * Render a grid\n     */\n    GameOfLife.drawGrid = function () {\n        if (!this.config.drawGrid) return;\n        var dim = this.helpers.getCellDimensions();\n\n        for (var x = dim.w; x < this.width; x += dim.w) {\n            this.ctx.moveTo(x, 0);\n            this.ctx.lineTo(x, this.width);\n        }\n\n        for (var y = dim.h; y < this.height; y += dim.h) {\n            this.ctx.moveTo(0, y);\n            this.ctx.lineTo(this.width, y);\n        }\n\n        this.ctx.strokeStyle = this.config.colorGrid;\n        this.ctx.stroke();\n    };\n\n    /**\n     * Activate a cell on the board\n     * @param cell\n     */\n    GameOfLife.activateCell = function (cell) {\n        // Return early if possible\n        if(this.data[cell.x][cell.y] === 1) return;\n        this.data[cell.x][cell.y] = 1;\n\n        // Clear the grid and re-render the cells\n        this.clear();\n        this.drawCells();\n    };\n\n    /**\n     *\n     * @param cell\n     */\n    GameOfLife.deactivateCell = function (cell) {\n        // Return early if possible\n        if(!this.data[cell.x][cell.y]) return;\n        this.data[cell.x][cell.y] = 0;\n\n        // Clear the grid and re-render the cells\n        this.clear();\n        this.drawCells();\n    };\n\n    /**\n     * Gets all activated neighbor cells surrounding a cell\n     * @param cell\n     * @returns {Array}\n     */\n    GameOfLife.getCellNeighbors = function(cell) {\n        var neighbors = [];\n\n        var tempX, tempY, tempCell;\n        // Check all 8 bordering cells for occupancy\n        for (var i = -1; i <= 1 ; i++) {\n            for (var j = -1; j <= 1; j++) {\n                // Skip origin cell\n                if (i == 0 && j == 0) continue;\n                tempX = cell.x + i;\n                tempY = cell.y + j;\n                tempCell = {x: tempX, y: tempY};\n                // If the cell is in the bounds of the canvas and it's activated, add it to result set\n                if (this.helpers.isCellValid(tempCell) && this.data[tempCell.x][tempCell.y] === 1) {\n                    neighbors.push(tempCell);\n                }\n            }\n        }\n        return neighbors;\n    };\n\n    /**\n     * Checks if a cell is within the bounds of the map\n     * @param cell\n     * @returns {boolean}\n     */\n    GameOfLife.helpers.isCellValid = function(cell) {\n        if (cell.x < 0 || cell.y < 0) return false;\n        if (cell.x >= this.parent.col || cell.y >= this.parent.row) return false;\n        return true;\n    };\n\n    /**\n     * Draws a cell on the canvas\n     * @param cell {{x: number, y: number}}\n     */\n    GameOfLife.renderCell = function (cell) {\n        var dim = this.helpers.getCellDimensions();\n\n        var x = dim.w * cell.x;\n        var y = dim.h * cell.y;\n\n        this.ctx.fillStyle = this.config.colorCell;\n        this.ctx.fillRect(x, y, dim.w, dim.h);\n    };\n\n\n    GameOfLife.drawCells = function () {\n        for (var c = 0; c < this.col; c++) {\n            for (var r = 0; r < this.row; r++) {\n                if(this.data[c][r] === 1) {\n                    this.renderCell({x: c, y: r});\n                }\n            }\n        }\n    };\n\n    /**\n     * Actual game of life code. Updates the array. Note the use of a buffer array. I had considered creating a better\n     * defined \"Cell\" object with an update state to avoid this, but decided against it in exchange for simplicity.\n     */\n    GameOfLife.logicalStep = function () {\n        /*\n         Game of Life Rules\n         Source: https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\n         1) Any live cell with fewer than two live neighbours dies, as if caused by under-population.\n         2) Any live cell with two or three live neighbours lives on to the next generation.\n         3) Any live cell with more than three live neighbours dies, as if by over-population.\n         4) Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\n         */\n\n        var neighbors, tempCell;\n        var tempArray = this.data.map(function(arr) {\n            return arr.slice();\n        });\n\n        for (var x = 0; x < this.col; x++) {\n            for (var y = 0; y < this.row; y++) {\n                tempCell = {x: x, y: y};\n                neighbors = this.getCellNeighbors(tempCell);\n                // Live cell rules:\n                if (this.data[x][y] === 1) {\n                    if (neighbors.length < 2) {\n                        tempArray[x][y] = 0;\n                        // console.log(\"Killing [<2]\", tempCell);\n                    }\n                    if (neighbors.length > 3) {\n                        tempArray[x][y] = 0;\n                        // console.log(\"Killing [>3]\", tempCell);\n                    }\n                // Dead cell rules:\n                } else {\n                    if (neighbors.length == 3) {\n                        // console.log(\"Spawning [=3]\", tempCell);\n                        tempArray[x][y] = 1;\n                    }\n                }\n\n            }\n        }\n        this.data = tempArray;\n    };\n\n    /**\n     * Clear the canvas\n     */\n    GameOfLife.clear = function () {\n        this.ctx.clearRect(0, 0, this.width, this.height);\n        this.drawGrid();\n    };\n\n    /**\n     * MouseMove handler - unused in this version\n     * @param pos\n     */\n    GameOfLife.handleMouseMove = function (pos) {\n        this.activateCell(pos);\n    };\n\n    /**\n     * Mouse click handler\n     * @param pos\n     */\n    GameOfLife.handleMouseClick = function (pos) {\n        this.activateCell(pos);\n    };\n\n    GameOfLife.eventHandlers.mouseMove = function (evt) {\n        this.handleMouseMove(this.helpers.translateMousePos(this.helpers.getRelativeMousePos(evt)));\n    };\n\n    GameOfLife.eventHandlers.mouseClick = function (evt) {\n        this.handleMouseClick(this.helpers.translateMousePos(this.helpers.getRelativeMousePos(evt)));\n    };\n\n    /**\n     * Called when the step button is clicked - moves one cycle forward\n     * @param evt\n     * @returns {boolean}\n     */\n    GameOfLife.eventHandlers.stepClick = function (evt) {\n        this.stepAndRender();\n        evt.preventDefault();\n        return false;\n    };\n\n    /**\n     * Plays/Pauses the simulation\n     * @param evt\n     * @returns {boolean}\n     */\n    GameOfLife.eventHandlers.playClick = function (evt) {\n        if (this.running) {\n            this.running = false;\n            this.$btnPlay.innerText = \"Play\";\n            this.$btnStep.removeAttribute('disabled');\n        } else {\n            this.running = true;\n            this.$btnPlay.innerText = \"Pause\";\n            this.$btnStep.setAttribute('disabled', 'true');\n            this.stepAndRender();\n        }\n        evt.preventDefault();\n        return false;\n    };\n\n    /**\n     * Computes and returns the relative mouse position with the top-left being 0,0\n     * @param evt\n     * @returns {{x: number, y: number}}\n     */\n    GameOfLife.helpers.getRelativeMousePos = function (evt) {\n        var rect = this.parent.canvas.getBoundingClientRect();\n        var x = evt.clientX - rect.left;\n        var y = evt.clientY - rect.top;\n        return {x: x, y: y};\n    };\n\n    /**\n     * Calculates the size of each cell based on config and canvas size\n     * @returns {{w: number, h: number}}\n     */\n    GameOfLife.helpers.getCellDimensions = function () {\n        var cellWidth = this.parent.width / this.parent.col;\n        var cellHeight = this.parent.height / this.parent.row;\n        return {w: cellWidth, h: cellHeight};\n    };\n\n    /**\n     * Translates relative mouse coordinates into cell coordinates\n     * @param pos {{x: number, y: number}}\n     * @returns {{x: number, y: number}}\n     */\n    GameOfLife.helpers.translateMousePos = function (pos) {\n        // Get the width and height of each individual cell\n        var cellDim = this.getCellDimensions();\n        // Calculate the cell from the grid based on x,y coords\n        var xPos = Math.floor(pos.x / cellDim.h);\n        var yPos = Math.floor(pos.y / cellDim.w);\n        return {x: xPos, y: yPos};\n    };\n\n\n    // Initialize GameOfLife once the page is done loading\n    window.addEventListener('load', GameOfLife.init(), false);\n})();\n"],"sourceRoot":"/source/"}